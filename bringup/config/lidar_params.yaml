main_robot:
  beacon_detector_node:
    ros__parameters:
      enable_robot_position_reception: False
      object_topic: "top_obstacle"
      position_topic: "top_lidar_position"
      debug_topic: "debug"
      color_topic: "init/team_color"
      default_color: "yellow"
      init_position: [1.83, 0.145, 4.18]
      beacons: [0.05, 3.094, 1.95, 3.094, 1., -0.095, -0.122, 1.73] # [0.072, 3.094, 1.928, 3.094, 0.5, -0.094, -0.035, 1.73] 
      boundaries:  [0.0, 2.0, 0.0, 3.0]
      distance_tolerance: 0.2
      angle_tolerance: 0.7853981633974483
      display_topic: "top_lidar_position_display"
      robot_position_topic: "robot_position"
      enable_wait_color: True
      enable_initial_position: False

  bot_object_detector_node:
    ros__parameters:
      scan_topic: "bottom_lidar/scan"
      object_topic: "bot_obstacle"
      object_display_topic: "bot_object_display"
      place: "bas"

  top_object_detector_node:
    ros__parameters:
      scan_topic: "top_lidar/scan"
      object_topic: "top_obstacle"
      object_display_topic: "top_object_display"
      place: "haut"

  robot_data_merger_node:
    ros__parameters:
      enable_wait_color: True
      color_topic: "init/team_color"
      default_color: "yellow"
      robot_data_topic: "Odom"
      sync: True
      robot_position_topic: "rpos"
      zc_lidar_position_topic: "/zone_calcul/zc_lidar_position"
      top_lidar_position_topic: "top_lidar_position"
      bottom_lidar_position_topic: "bottom_lidar_position"
      display_topic: "robot_position_display"

  avoid_obstacle_node:
    ros__parameters:
      robot_data_topic: "Odom"
      robot_position_topic: "top_lidar_position"
      goal_position_topic: "goal_position"
      scan_topic: "top_lidar/scan"
      obstacle_detected_topic: "obstacle_detected"
      obstacle_detection_distance: 0.5
      detection_mode: "rectangle"
      angle_correction: -1.5707963267948966
      angle_increment: 0.0034828970674425364
      len_scan: 1800
      boundaries:  [0.0, 2.0, 0.0, 3.0]
      cone_range: 80. # degrees
      thickness: 0.4 # meters
      boundary_limit_detection: 0.1
      enable_detection: True
      enable_boundary_check: True
      enable_new_path: True

# If you want to create another configuration for another namespace you can write it like that
robot_example:
  beacon_detector_node:
    ros__parameters:
      enable_robot_position_reception: False
      object_topic: "/obstacle"
      position_topic: "/position"
      debug_topic: "/debug"
      beacons: [3.1, 2.1, 3.2, .2, 3.05, .05, 0., 2.]
      boundaries: [.0, 3., .0, 2.]
      distance_tolerance: 0.1

  object_node_detector:
    ros__parameters:
      scan_topic: "/scan"